---
alwaysApply: true
---

# Codifeed - Social Network for Developers

Codifeed is a Social Network for Developers.

This is a full-stack project featuring a Flask REST API backend and a TypeScript-based React frontend with TanStack Router.

## Stack

### Frontend

- Typescript
- React
- Tanstack Router
- Tanstack Query
- TailwindCSS and Shadcn/ui
- Zod
- Openapi-typescript and Openapi-fetch for automatic types generation

### Backend

- Python
- Flask-OpenApi3 (powered by Flask and Pydantic for OpenAPI schemas generation)
- SQLModel (powered by Pydantic and SQLAlchemy based)

## Project Structure

The project is divided into two main directories:

- `api/` - Flask REST API backend
- `web/` - React frontend with TanStack Router

### Backend (API)

The backend is a Flask REST API with JWT authentication, located in the `api/` directory:

- Entry point: [api/run.py](mdc:api/run.py)
- App factory: [api/app/**init**.py](mdc:api/app/__init__.py)
- Models: [api/app/models](mdc:api/app/models)
- Routes: [api/app/routes](mdc:api/app/routes)
- Utils: [api/app/utils](mdc:api/app/utils)

### Frontend (Web)

The frontend is a React application with TanStack Router, located in the `web/` directory:

- Entry point: [web/src/main.tsx](mdc:web/src/main.tsx)
- Routes: [web/src/routes](mdc:web/src/routes)
- Components: [web/src/components](mdc:web/src/components)
- API Services: [web/src/services/api](mdc:web/src/services/api)
- Generated API Types: [web/src/types/api.gen.ts](mdc:web/src/types/api.gen.ts)

## Type Safety

The project uses OpenAPI to ensure type safety between the backend and frontend:

- Backend generates OpenAPI schema
- Frontend uses `openapi-typescript` to generate TypeScript types from the schema
- API calls use `openapi-fetch` for type-safe requests
