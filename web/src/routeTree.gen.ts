/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PublicRouteImport } from './routes/_public'
import { Route as AppRouteImport } from './routes/_app'
import { Route as PublicIndexRouteImport } from './routes/_public/index'
import { Route as PublicSignupRouteImport } from './routes/_public/signup'
import { Route as PublicLoginRouteImport } from './routes/_public/login'
import { Route as AppHomeRouteImport } from './routes/_app/home'
import { Route as AppUsernameIndexRouteImport } from './routes/_app/$username.index'
import { Route as AppUsernameFollowingRouteImport } from './routes/_app/$username.following'
import { Route as AppUsernameFollowersRouteImport } from './routes/_app/$username.followers'

const PublicRoute = PublicRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRoute = AppRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicIndexRoute = PublicIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PublicRoute,
} as any)
const PublicSignupRoute = PublicSignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => PublicRoute,
} as any)
const PublicLoginRoute = PublicLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => PublicRoute,
} as any)
const AppHomeRoute = AppHomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => AppRoute,
} as any)
const AppUsernameIndexRoute = AppUsernameIndexRouteImport.update({
  id: '/$username/',
  path: '/$username/',
  getParentRoute: () => AppRoute,
} as any)
const AppUsernameFollowingRoute = AppUsernameFollowingRouteImport.update({
  id: '/$username/following',
  path: '/$username/following',
  getParentRoute: () => AppRoute,
} as any)
const AppUsernameFollowersRoute = AppUsernameFollowersRouteImport.update({
  id: '/$username/followers',
  path: '/$username/followers',
  getParentRoute: () => AppRoute,
} as any)

export interface FileRoutesByFullPath {
  '/home': typeof AppHomeRoute
  '/login': typeof PublicLoginRoute
  '/signup': typeof PublicSignupRoute
  '/': typeof PublicIndexRoute
  '/$username/followers': typeof AppUsernameFollowersRoute
  '/$username/following': typeof AppUsernameFollowingRoute
  '/$username': typeof AppUsernameIndexRoute
}
export interface FileRoutesByTo {
  '/home': typeof AppHomeRoute
  '/login': typeof PublicLoginRoute
  '/signup': typeof PublicSignupRoute
  '/': typeof PublicIndexRoute
  '/$username/followers': typeof AppUsernameFollowersRoute
  '/$username/following': typeof AppUsernameFollowingRoute
  '/$username': typeof AppUsernameIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app': typeof AppRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/_app/home': typeof AppHomeRoute
  '/_public/login': typeof PublicLoginRoute
  '/_public/signup': typeof PublicSignupRoute
  '/_public/': typeof PublicIndexRoute
  '/_app/$username/followers': typeof AppUsernameFollowersRoute
  '/_app/$username/following': typeof AppUsernameFollowingRoute
  '/_app/$username/': typeof AppUsernameIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/home'
    | '/login'
    | '/signup'
    | '/'
    | '/$username/followers'
    | '/$username/following'
    | '/$username'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/home'
    | '/login'
    | '/signup'
    | '/'
    | '/$username/followers'
    | '/$username/following'
    | '/$username'
  id:
    | '__root__'
    | '/_app'
    | '/_public'
    | '/_app/home'
    | '/_public/login'
    | '/_public/signup'
    | '/_public/'
    | '/_app/$username/followers'
    | '/_app/$username/following'
    | '/_app/$username/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/': {
      id: '/_public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublicIndexRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/signup': {
      id: '/_public/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof PublicSignupRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/login': {
      id: '/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_app/home': {
      id: '/_app/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof AppHomeRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/$username/': {
      id: '/_app/$username/'
      path: '/$username'
      fullPath: '/$username'
      preLoaderRoute: typeof AppUsernameIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/$username/following': {
      id: '/_app/$username/following'
      path: '/$username/following'
      fullPath: '/$username/following'
      preLoaderRoute: typeof AppUsernameFollowingRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/$username/followers': {
      id: '/_app/$username/followers'
      path: '/$username/followers'
      fullPath: '/$username/followers'
      preLoaderRoute: typeof AppUsernameFollowersRouteImport
      parentRoute: typeof AppRoute
    }
  }
}

interface AppRouteChildren {
  AppHomeRoute: typeof AppHomeRoute
  AppUsernameFollowersRoute: typeof AppUsernameFollowersRoute
  AppUsernameFollowingRoute: typeof AppUsernameFollowingRoute
  AppUsernameIndexRoute: typeof AppUsernameIndexRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppHomeRoute: AppHomeRoute,
  AppUsernameFollowersRoute: AppUsernameFollowersRoute,
  AppUsernameFollowingRoute: AppUsernameFollowingRoute,
  AppUsernameIndexRoute: AppUsernameIndexRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

interface PublicRouteChildren {
  PublicLoginRoute: typeof PublicLoginRoute
  PublicSignupRoute: typeof PublicSignupRoute
  PublicIndexRoute: typeof PublicIndexRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicLoginRoute: PublicLoginRoute,
  PublicSignupRoute: PublicSignupRoute,
  PublicIndexRoute: PublicIndexRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
