/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Login a user */
        post: operations["auth_auth_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Logout a user */
        post: operations["auth_auth_logout_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Refresh a user's access token */
        post: operations["auth_auth_refresh_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new user */
        post: operations["auth_auth_signup_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/posts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all posts */
        get: operations["posts_posts_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get the current user */
        get: operations["user_users_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        /** @description Get a user by id */
        get: operations["user_users__int_user_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** LoginCredentials */
        LoginCredentials: {
            /** Email */
            email: string;
            /** Password */
            password: string;
        };
        /** LoginTokens */
        LoginTokens: {
            /** Access Token */
            access_token: string;
            /** Refresh Token */
            refresh_token: string;
        };
        /** LogoutResponse */
        LogoutResponse: {
            /** Message */
            message: string;
        };
        /** MessageResponse */
        MessageResponse: {
            /** Message */
            message: string;
        };
        /** UserCreate */
        UserCreate: {
            /**
             * Avatar
             * @default null
             */
            avatar: string | null;
            /** Email */
            email: string;
            /** Firstname */
            firstname: string;
            /** Lastname */
            lastname: string;
            /** Password */
            password: string;
        };
        /** UserRead */
        UserRead: {
            /**
             * Avatar
             * @default null
             */
            avatar: string | null;
            /** Email */
            email: string;
            /** Firstname */
            firstname: string;
            /** Id */
            id: number;
            /** Lastname */
            lastname: string;
        };
        /** ValidationErrorModel */
        ValidationErrorModel: {
            /**
             * Error context
             * @description an optional object which contains values required to render the error message.
             * @default null
             */
            ctx: {
                [key: string]: unknown;
            } | null;
            /**
             * Location
             * @description the error's location as a list.
             * @default null
             */
            loc: string[] | null;
            /**
             * Message
             * @description a computer-readable identifier of the error type.
             * @default null
             */
            msg: string | null;
            /**
             * Error Type
             * @description a human readable explanation of the error.
             * @default null
             */
            type_: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type LoginCredentials = components['schemas']['LoginCredentials'];
export type LoginTokens = components['schemas']['LoginTokens'];
export type LogoutResponse = components['schemas']['LogoutResponse'];
export type MessageResponse = components['schemas']['MessageResponse'];
export type UserCreate = components['schemas']['UserCreate'];
export type UserRead = components['schemas']['UserRead'];
export type ValidationErrorModel = components['schemas']['ValidationErrorModel'];
export type $defs = Record<string, never>;
export interface operations {
    auth_auth_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginCredentials"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRead"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorModel"][];
                };
            };
        };
    };
    auth_auth_logout_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LogoutResponse"];
                };
            };
        };
    };
    auth_auth_refresh_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginTokens"];
                };
            };
        };
    };
    auth_auth_signup_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreate"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRead"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorModel"][];
                };
            };
        };
    };
    posts_posts_get: {
        parameters: {
            query?: {
                user_id?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageResponse"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorModel"][];
                };
            };
        };
    };
    user_users_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRead"];
                };
            };
        };
    };
    user_users__int_user_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRead"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorModel"][];
                };
            };
        };
    };
}
export enum ApiPaths {
    auth_auth_login_post = "/auth/login",
    auth_auth_logout_post = "/auth/logout",
    auth_auth_refresh_post = "/auth/refresh",
    auth_auth_signup_post = "/auth/signup",
    posts_posts_get = "/posts",
    user_users_me_get = "/users/me",
    user_users__int_user_id__get = "/users/{user_id}"
}
